/*
 * $Revision: 20 $
 * Copyright 2008 js-home.org
 * $Name: not supported by cvs2svn $
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.railsim.gui.panels;

import java.awt.BorderLayout;

import javax.swing.*;

import org.railsim.*;
import org.railsim.editor.EditorActionEvent;
import org.railsim.editor.EditorEvent;
import org.railsim.event.*;
import org.railsim.gui.panels.readypanels.trackObjectRequirements;
import org.railsim.gui.renderer.genericPaintInterfaceComboBoxRenderer;
import org.railsim.service.trackObjects.pathableObject;
import org.railsim.service.trackObjects.trackObject;

/**
 *
 * @author js
 */
public class hidepanel_edittrackobjects extends javax.swing.JPanel {

	private boolean CBeventDisable = false;
	private trackObject workingTO = null;
	private trackObjectRequirements tor = null;

	/**
	 * Creates new form mainpanel_file
	 */
	public hidepanel_edittrackobjects() {
		initComponents();
		tor = new trackObjectRequirements();
		reqPanel.add(tor, BorderLayout.CENTER);

		dataCollector.collector.editorEventListeners.addListener(new AbstractListener() {
			@Override
			public void action(AbstractEvent e) {
				editorEvent((EditorEvent) e);
			}
		});

		CBeventDisable = true;
		for (String s : dataCollector.collector.tol.values()) {
			trackObject to = dataCollector.collector.tol.load(s);
			((DefaultListModel) toList.getModel()).addElement(to);
		}
		CBeventDisable = false;
		toList.setSelectedIndex(-1);
		setRequirements(null);
	}

	/**
	 * This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        jScrollPane1 = new javax.swing.JScrollPane();
        toList = new javax.swing.JList();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        add_ToggleButton = new javax.swing.JToggleButton();
        del_Button = new javax.swing.JButton();
        rotate_Button = new javax.swing.JButton();
        reqPanel = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        jScrollPane1.setMinimumSize(new java.awt.Dimension(80, 24));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(200, 132));
        toList.setModel(new DefaultListModel());
        toList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        toList.setCellRenderer(new genericPaintInterfaceComboBoxRenderer());
        toList.addListSelectionListener(new javax.swing.event.ListSelectionListener()
        {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt)
            {
                toListValueChanged(evt);
            }
        });

        jScrollPane1.setViewportView(toList);

        add(jScrollPane1, java.awt.BorderLayout.WEST);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel1.setText("als");
        jPanel1.add(jLabel1);

        add_ToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/railsim/gui/resources/add.png")));
        add_ToggleButton.setText("neues Gleisobjekt");
        add_ToggleButton.setActionCommand("add");
        add_ToggleButton.setEnabled(false);
        add_ToggleButton.setMargin(new java.awt.Insets(2, 5, 2, 5));
        add_ToggleButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ToggleButtonActionPerformed(evt);
            }
        });

        jPanel1.add(add_ToggleButton);

        del_Button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/railsim/gui/resources/delete.png")));
        del_Button.setText("Delete");
        del_Button.setActionCommand("del");
        del_Button.setEnabled(false);
        del_Button.setMargin(new java.awt.Insets(2, 5, 2, 5));
        del_Button.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ButtonActionPerformed(evt);
            }
        });

        jPanel1.add(del_Button);

        rotate_Button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/railsim/gui/resources/rotate.png")));
        rotate_Button.setText("Rotate");
        rotate_Button.setActionCommand("rotate");
        rotate_Button.setEnabled(false);
        rotate_Button.setMargin(new java.awt.Insets(2, 5, 2, 5));
        rotate_Button.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ButtonActionPerformed(evt);
            }
        });

        jPanel1.add(rotate_Button);

        jPanel2.add(jPanel1, java.awt.BorderLayout.CENTER);

        reqPanel.setLayout(new java.awt.BorderLayout());

        jPanel2.add(reqPanel, java.awt.BorderLayout.WEST);

        add(jPanel2, java.awt.BorderLayout.CENTER);

    }// </editor-fold>//GEN-END:initComponents

    private void ToggleButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ToggleButtonActionPerformed
    {//GEN-HEADEREND:event_ToggleButtonActionPerformed
		dataCollector.collector.thegame.runAction(new EditorActionEvent(evt.getActionCommand(), add_ToggleButton.isSelected()));
    }//GEN-LAST:event_ToggleButtonActionPerformed

    private void toListValueChanged(javax.swing.event.ListSelectionEvent evt)//GEN-FIRST:event_toListValueChanged
    {//GEN-HEADEREND:event_toListValueChanged
		if (evt.getValueIsAdjusting() == false) {
			trackObject to = null;
			if (toList.getSelectedIndex() != -1) {
				to = (trackObject) ((DefaultListModel) toList.getModel()).getElementAt(toList.getSelectedIndex());
			}
			if (to != null) {
				add_ToggleButton.setEnabled(true);
				add_ToggleButton.setSelected(true);
				if (!CBeventDisable) {
					dataCollector.collector.thegame.runAction(new EditorActionEvent<>("trackobjectselect", to.getTypeName()));
					dataCollector.collector.thegame.runAction(new EditorActionEvent(add_ToggleButton.getActionCommand(), true));
				}
			} else {
				add_ToggleButton.setEnabled(false);
			}
		}
    }//GEN-LAST:event_toListValueChanged

    private void ButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ButtonActionPerformed
    {//GEN-HEADEREND:event_ButtonActionPerformed
		dataCollector.collector.thegame.runAction(new EditorActionEvent(evt.getActionCommand()));
    }//GEN-LAST:event_ButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton add_ToggleButton;
    private javax.swing.JButton del_Button;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel reqPanel;
    private javax.swing.JButton rotate_Button;
    private javax.swing.JList toList;
    // End of variables declaration//GEN-END:variables

	void editorEvent(EditorEvent e) {
		switch (e.getType()) {
			case EditorEvent.TRACKOBJECT_SELECTED:
				workingTO = e.getTrackObject();
				if (!(workingTO instanceof pathableObject) || !((pathableObject) workingTO).isEnabled()) {
					del_Button.setEnabled(true);
					rotate_Button.setEnabled(true);
				} else {
					del_Button.setEnabled(false);
					rotate_Button.setEnabled(false);
				}
				break;
			case EditorEvent.TRACKOBJECT_UNSELECTED:
				workingTO = e.getTrackObject();
				del_Button.setEnabled(false);
				rotate_Button.setEnabled(false);
				break;
			case EditorEvent.TRACKOBJECT_MOVEMODE:
				add_ToggleButton.setSelected(false);
				break;
			case EditorEvent.TRACKOBJECT_GUITYPECHANGED:
				CBeventDisable = true;
				toList.setSelectedIndex(dataCollector.collector.tol.getIndex(e.getString()));
				setRequirements((trackObject) toList.getSelectedValue());
				CBeventDisable = false;
				break;
		}
	}

	void setRequirements(trackObject to) {
		tor.setRequirements(to);
	}
}
