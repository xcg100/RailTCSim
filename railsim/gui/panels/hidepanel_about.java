/*
 * $Revision: 23 $
 * Copyright 2008 js-home.org
 * $Name: not supported by cvs2svn $
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.railsim.gui.panels;

import java.util.Timer;
import java.util.TimerTask;

import org.railsim.*;
import org.railsim.train.fulltrain;

/**
 *
 * @author js
 */
public class hidepanel_about extends javax.swing.JPanel {

	TimerTask ttsk;

	TimerTask mkTimerTask() {
		ttsk = new TimerTask() {
			@Override
			public void run() {
				javax.swing.SwingUtilities.invokeLater(new Runnable() {
					@Override
					public void run() {
						memoryBar.setMaximum((int) (java.lang.Runtime.getRuntime().totalMemory()));
						memoryBar.setValue((int) (java.lang.Runtime.getRuntime().totalMemory() - java.lang.Runtime.getRuntime().freeMemory()));
						memoryBar.setString(memoryBar.getValue() + " belegt");
						paintDurationBar.setValue((int) dataCollector.collector.paintThreadDuration);
						paintDurationBar.setString(dataCollector.collector.paintThreadDuration / 10000000.0 + "ms");
						trainDurationBar.setValue((int) dataCollector.collector.trainThreadDuration);
						trainDurationBar.setString(dataCollector.collector.trainThreadDuration / 10000000.0 + "ms");
						prerunnerDurationBar.setValue((int) dataCollector.collector.prerunnerThreadDuration);
						prerunnerDurationBar.setString(dataCollector.collector.prerunnerThreadDuration / 10000000.0 + "ms");
						pathQueueSizeBar.setValue((int) dataCollector.collector.pathQueueSize);
						pathQueueSizeBar.setString(dataCollector.collector.pathQueueSize + "");
					}
				});
			}
		};
		return ttsk;
	}
	Timer tm = null;

	/**
	 * Creates new form mainpanel_file
	 */
	public hidepanel_about() {
		initComponents();
		memoryBar.setMaximum((int) (java.lang.Runtime.getRuntime().totalMemory()));
		paintDurationBar.setMaximum(30000000); // 30 milli
		trainDurationBar.setMaximum(30000000);
		prerunnerDurationBar.setMaximum(30000000);
		tm = new java.util.Timer();
		tm.scheduleAtFixedRate(mkTimerTask(), 0, 5000);
	}

	/**
	 * This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        memoryBar = new javax.swing.JProgressBar();
        trainDurationBar = new javax.swing.JProgressBar();
        paintDurationBar = new javax.swing.JProgressBar();
        prerunnerDurationBar = new javax.swing.JProgressBar();
        pathQueueSizeBar = new javax.swing.JProgressBar();
        secCB = new javax.swing.JCheckBox();
        prerunnerVisibleCB = new javax.swing.JCheckBox();

        setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        memoryBar.setToolTipText("Speichernutzung");
        memoryBar.setStringPainted(true);
        add(memoryBar);

        trainDurationBar.setToolTipText("Zugrechenzeit");
        trainDurationBar.setStringPainted(true);
        add(trainDurationBar);

        paintDurationBar.setToolTipText("Darstellungszeit");
        paintDurationBar.setStringPainted(true);
        add(paintDurationBar);

        prerunnerDurationBar.setToolTipText("Vorl\u00e4ufer Rechenzeit");
        prerunnerDurationBar.setStringPainted(true);
        add(prerunnerDurationBar);

        pathQueueSizeBar.setMaximum(10);
        pathQueueSizeBar.setToolTipText("Anzahl wartender Fahrwege");
        pathQueueSizeBar.setStringPainted(true);
        add(pathQueueSizeBar);

        secCB.setText("h\u00e4ufig");
        secCB.setToolTipText("\u00f6fter aktualisieren, braucht mehr CPU Leistung");
        secCB.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        secCB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        secCB.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                secCBActionPerformed(evt);
            }
        });

        add(secCB);

        prerunnerVisibleCB.setText("Prerunner zeigen");
        prerunnerVisibleCB.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        prerunnerVisibleCB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        prerunnerVisibleCB.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                prerunnerVisibleCBActionPerformed(evt);
            }
        });

        add(prerunnerVisibleCB);

    }// </editor-fold>//GEN-END:initComponents

    private void prerunnerVisibleCBActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_prerunnerVisibleCBActionPerformed
    {//GEN-HEADEREND:event_prerunnerVisibleCBActionPerformed
		fulltrain.PAINTPRERUNNER = prerunnerVisibleCB.isSelected();
		fulltrain.paintTrainData = prerunnerVisibleCB.isSelected();
    }//GEN-LAST:event_prerunnerVisibleCBActionPerformed

    private void secCBActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_secCBActionPerformed
    {//GEN-HEADEREND:event_secCBActionPerformed
		if (secCB.isSelected()) {
			if (tm != null) {
				tm.cancel();
			}
			tm = new java.util.Timer();
			tm.scheduleAtFixedRate(mkTimerTask(), 0, 500);
		} else {
			ttsk.cancel();
			if (tm != null) {
				tm.cancel();
			}
			tm = new java.util.Timer();
			tm.scheduleAtFixedRate(mkTimerTask(), 0, 5000);
		}
    }//GEN-LAST:event_secCBActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar memoryBar;
    private javax.swing.JProgressBar paintDurationBar;
    private javax.swing.JProgressBar pathQueueSizeBar;
    private javax.swing.JProgressBar prerunnerDurationBar;
    private javax.swing.JCheckBox prerunnerVisibleCB;
    private javax.swing.JCheckBox secCB;
    private javax.swing.JProgressBar trainDurationBar;
    // End of variables declaration//GEN-END:variables
}
