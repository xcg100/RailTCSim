/*
 * $Revision: 20 $
 * Copyright 2008 js-home.org
 * $Name: not supported by cvs2svn $
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.railsim.gui.panels;

import java.awt.BorderLayout;
import java.util.Iterator;

import javax.swing.*;
import javax.swing.GroupLayout.*;

import java.text.*;

import javax.swing.JFormattedTextField.AbstractFormatter;

import org.railsim.*;
import org.railsim.editor.*;
import org.railsim.event.*;
import org.railsim.gui.panels.readypanels.trackObjectRequirements;
import org.railsim.service.odsHashSet;
import org.railsim.service.trackObjects.*;

/**
 *
 * @author js
 */
public class sidepanel_edittrackobjects extends javax.swing.JPanel {

	private class FormattedTextFieldVerifier extends InputVerifier {

		@Override
		public boolean verify(JComponent input) {
			if (input instanceof JFormattedTextField) {
				JFormattedTextField ftf = (JFormattedTextField) input;
				AbstractFormatter formatter = ftf.getFormatter();
				if (formatter != null) {
					String text = ftf.getText();
					try {
						formatter.stringToValue(text);
						return true;
					} catch (ParseException pe) {
						return false;
					}
				}
			}
			return true;
		}

		@Override
		public boolean shouldYieldFocus(JComponent input) {
			return verify(input);
		}
	};
	private trackObject workingTO = null;
	private java.awt.event.ActionListener cbaction = null;
	private java.awt.event.ActionListener tfaction = null;
	private trackObjectRequirements tor = null;

	/**
	 * Creates new form sidepanel_edittrackobject
	 */
	public sidepanel_edittrackobjects() {
		initComponents();
		tor = new trackObjectRequirements("verschiebe nicht auf Gleis mit");
		add(tor, BorderLayout.SOUTH);

		cbaction = new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				CBActionPerformed(evt);
			}
		};
		tfaction = new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				TFActionPerformed(evt);
			}
		};

		dataCollector.collector.editorEventListeners.addListener(new AbstractListener() {
			@Override
			public void action(AbstractEvent e) {
				editorEvent((EditorEvent) e);
			}
		});
	}

	/**
	 * This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        typeField = new javax.swing.JTextField();
        regionComboBox = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        dataPanel = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Daten"));
        jLabel1.setText("Name");

        nameField.setToolTipText("RETURN dr\u00fccken um Wert zu speichern");
        nameField.setEnabled(false);
        nameField.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                nameFieldActionPerformed(evt);
            }
        });

        jLabel2.setText("Typ");

        typeField.setEditable(false);

        regionComboBox.setEditable(true);
        regionComboBox.setToolTipText("RETURN dr\u00fccken um neue Region zu erzeugen");
        regionComboBox.setEnabled(false);
        regionComboBox.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                regionComboBoxActionPerformed(evt);
            }
        });

        jLabel3.setText("Region/Bhf");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nameField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                    .addComponent(regionComboBox, 0, 170, Short.MAX_VALUE)
                    .addComponent(typeField, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(regionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(typeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        add(jPanel1, java.awt.BorderLayout.NORTH);

        dataPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Extras"));
        javax.swing.GroupLayout dataPanelLayout = new javax.swing.GroupLayout(dataPanel);
        dataPanel.setLayout(dataPanelLayout);
        dataPanelLayout.setHorizontalGroup(
            dataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 237, Short.MAX_VALUE)
        );
        dataPanelLayout.setVerticalGroup(
            dataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 159, Short.MAX_VALUE)
        );
        add(dataPanel, java.awt.BorderLayout.CENTER);

    }// </editor-fold>//GEN-END:initComponents

    private void regionComboBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_regionComboBoxActionPerformed
    {//GEN-HEADEREND:event_regionComboBoxActionPerformed
		if (workingTO == null) {
			return;
		}
		workingTO.setRegion((String) regionComboBox.getSelectedItem());
		regionUpdate(false);
		dataCollector.collector.editorEvent(EditorEvent.TRACKOBJECT_MODIFIED, workingTO);
    }//GEN-LAST:event_regionComboBoxActionPerformed

    private void nameFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_nameFieldActionPerformed
    {//GEN-HEADEREND:event_nameFieldActionPerformed
		if (workingTO == null) {
			return;
		}
		workingTO.setName(nameField.getText());
		dataCollector.collector.editorEvent(EditorEvent.TRACKOBJECT_MODIFIED, workingTO);
    }//GEN-LAST:event_nameFieldActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel dataPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField nameField;
    private javax.swing.JComboBox regionComboBox;
    private javax.swing.JTextField typeField;
    // End of variables declaration//GEN-END:variables

	void createPanel() {
		GroupLayout layout;
		dataPanel.removeAll();
		layout = new GroupLayout(dataPanel);
		dataPanel.setLayout(layout);
		// Turn on automatically adding gaps between components
		layout.setAutoCreateGaps(true);

		// Turn on automatically creating gaps between components that touch
		// the edge of the container and the container.
		layout.setAutoCreateContainerGaps(true);

		if (workingTO == null) {
			return;
		}

		odsHashSet hm = workingTO.getData();

		// Create a sequential group for the horizontal axis.
		GroupLayout.SequentialGroup hGroup = layout.createSequentialGroup();

		// Create a sequential group for the vertical axis.
		GroupLayout.SequentialGroup vGroup = layout.createSequentialGroup();

		// The sequential group in turn contains two parallel groups.
		// One parallel group contains the labels, the other the text fields.
		// Putting the labels in a parallel group along the horizontal axis
		// positions them at the same x location.
		//
		// Variable indentation is used to reinforce the level of grouping.


		GroupLayout.ParallelGroup hpg1 = layout.createParallelGroup();
		hGroup.addGroup(hpg1);
		GroupLayout.ParallelGroup hpg2 = layout.createParallelGroup();
		hGroup.addGroup(hpg2);
		for (Iterator<objectDataStorage> it = hm.iterator(); it.hasNext();) {
			objectDataStorage key = it.next();
			JLabel l = new JLabel(key.getDescription());
			JComponent c = null;
			switch (key.getType()) {
				case objectDataStorage.TYPE_BOOLEAN: {
					JCheckBox cb = new JCheckBox();
					cb.setSelected(key.getBoolValue());
					if (key.isReadonly()) {
						cb.setEnabled(false);
					} else {
						cb.setActionCommand(key.getKey());
						cb.addActionListener(cbaction);
					}
					c = cb;
					break;
				}
				case objectDataStorage.TYPE_STRING: {
					JTextField tf = new JTextField();
					tf.setText(key.getValue());
					if (key.isReadonly()) {
						tf.setEnabled(false);
					} else {
						tf.setActionCommand(key.getKey());
						tf.addActionListener(tfaction);
					}
					c = tf;
					break;
				}
				case objectDataStorage.TYPE_INT: {
					JTextField tf = new JTextField();
					tf.setText(key.getValue());
					if (key.isReadonly()) {
						tf.setEnabled(false);
					} else {
						tf.setActionCommand(key.getKey());
						tf.addActionListener(tfaction);
					}
					c = tf;
					break;
				}
			}
			if (c != null) {
				hpg1.addComponent(l);
				hpg2.addComponent(c);
				vGroup.addGroup(layout.createParallelGroup(Alignment.BASELINE).addComponent(l).addComponent(c));
			}
		}
		layout.setHorizontalGroup(hGroup);
		layout.setVerticalGroup(vGroup);
	}

	void editorEvent(EditorEvent e) {
		switch (e.getType()) {
			case EditorEvent.TRACKOBJECT_SELECTED:
				workingTO = e.getTrackObject();
				nameField.setText(workingTO.getName());
				nameField.setEnabled(true);
				regionComboBox.setEnabled(true);
				typeField.setText(workingTO.getGUIObjectName());
				regionUpdate(false);
				createPanel();
				setRequirements(workingTO);
				break;
			case EditorEvent.TRACKOBJECT_UNSELECTED:
				workingTO = null;
				nameField.setText("");
				nameField.setEnabled(false);
				typeField.setText("");
				regionComboBox.setEnabled(false);
				regionUpdate(true);
				createPanel();
				setRequirements(null);
				break;
			case EditorEvent.TRACKOBJECT_VALUECHANGED:
				if (workingTO == e.getTrackObject()) {
					createPanel();
				}
				break;
		}
	}

	private void regionUpdate(boolean clear) {
		if (clear || workingTO == null) {
			regionComboBox.setModel(new javax.swing.DefaultComboBoxModel());
		} else {
			javax.swing.DefaultComboBoxModel cbm = new javax.swing.DefaultComboBoxModel();
			for (String s : trackObject.allregions) {
				cbm.addElement(s);
			}
			regionComboBox.setModel(cbm);
			regionComboBox.setSelectedItem(workingTO.getRegion());
		}
	}

	private void CBActionPerformed(java.awt.event.ActionEvent evt) {
		if (workingTO == null) {
			return;
		}
		workingTO.setData(evt.getActionCommand(), ((JCheckBox) evt.getSource()).isSelected() ? "y" : "n");
		dataCollector.collector.thepainter.paintOffTrack();
	}

	private void TFActionPerformed(java.awt.event.ActionEvent evt) {
		if (workingTO == null) {
			return;
		}
		workingTO.setData(evt.getActionCommand(), ((JTextField) evt.getSource()).getText());
		dataCollector.collector.thepainter.paintOffTrack();
	}

	void setRequirements(trackObject to) {
		tor.setRequirements(to);
	}
}
