/*
 * $Revision: 20 $
 * Copyright 2008 js-home.org
 * $Name: not supported by cvs2svn $
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.railsim.gui.panels;

import java.text.*;
import java.util.*;

import javax.swing.*;
import javax.swing.JFormattedTextField.AbstractFormatter;

import org.railsim.*;
import org.railsim.editor.EditorActionEvent;
import org.railsim.editor.EditorEvent;
import org.railsim.event.*;
import org.railsim.service.track;
import org.railsim.service.tracks.*;

/**
 *
 * @author js
 */
public class hidepanel_edittrack extends javax.swing.JPanel {

	private class FormattedTextFieldVerifier extends InputVerifier {

		@Override
		public boolean verify(JComponent input) {
			if (input instanceof JFormattedTextField) {
				JFormattedTextField ftf = (JFormattedTextField) input;
				AbstractFormatter formatter = ftf.getFormatter();
				if (formatter != null) {
					String text = ftf.getText();
					try {
						formatter.stringToValue(text);
						return true;
					} catch (ParseException pe) {
						return false;
					}
				}
			}
			return true;
		}

		@Override
		public boolean shouldYieldFocus(JComponent input) {
			return verify(input);
		}
	};
	HashMap<String, ArrayList<String>> ttypes = new HashMap<>();
	HashMap<String, JComboBox> ctypes = new HashMap<>();
	track workingTrack = null;
	boolean CBeventDisable = false;

	/**
	 * Creates new form mainpanel_file
	 */
	public hidepanel_edittrack() {
		initComponents();
		initPainterLists();
		setTrackValues(null);
		setPainterValues(null);

		dataCollector.collector.editorEventListeners.addListener(new AbstractListener() {
			@Override
			public void action(AbstractEvent e) {
				trackEvent((EditorEvent) e);
			}
		});
	}

	/**
	 * This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        jPanel4 = new javax.swing.JPanel();
        switchjunction_Button = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        embankmentCombo = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        railCombo = new javax.swing.JComboBox();
        jPanel3 = new javax.swing.JPanel();
        sleeperCombo = new javax.swing.JComboBox();
        jPanel6 = new javax.swing.JPanel();
        aboveCombo = new javax.swing.JComboBox();
        jPanel5 = new javax.swing.JPanel();
        mix1_ddb = new org.railsim.gui.DropDownButton();
        mix1_ddtb = new org.railsim.gui.DropDownToggleButton();

        setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Weiche"));
        switchjunction_Button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/railsim/gui/resources/switch.png")));
        switchjunction_Button.setText("umschalten");
        switchjunction_Button.setActionCommand("switch");
        switchjunction_Button.setEnabled(false);
        switchjunction_Button.setMargin(new java.awt.Insets(2, 5, 2, 5));
        switchjunction_Button.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ButtonActionPerformed(evt);
            }
        });

        jPanel4.add(switchjunction_Button);

        add(jPanel4);

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Untergrund"));
        embankmentCombo.setActionCommand("embankment");
        embankmentCombo.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                CBActionPerformed(evt);
            }
        });

        jPanel1.add(embankmentCombo);

        add(jPanel1);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Schiene"));
        railCombo.setActionCommand("rail");
        railCombo.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                CBActionPerformed(evt);
            }
        });

        jPanel2.add(railCombo);

        add(jPanel2);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Schwelle"));
        sleeperCombo.setActionCommand("sleeper");
        sleeperCombo.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                CBActionPerformed(evt);
            }
        });

        jPanel3.add(sleeperCombo);

        add(jPanel3);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Oberbau"));
        aboveCombo.setActionCommand("above");
        aboveCombo.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                CBActionPerformed(evt);
            }
        });

        jPanel6.add(aboveCombo);

        add(jPanel6);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("gemischtes"));
        mix1_ddb.setItems(new String[] {"Gleis umdrehen:turnaround", "Kopie nach 4,0 Meter links:copyleft40", "Kopie nach 4,5 Meter links:copyleft45", "Kopie nach 5,0 Meter links:copyleft50", "Kopie nach 4,0 Meter rechts:copyright40", "Kopie nach 4,5 Meter rechts:copyright45", "Kopie nach 5,0 Meter rechts:copyright50"});
        mix1_ddb.setEnabled(false);
        mix1_ddb.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ButtonActionPerformed(evt);
            }
        });

        jPanel5.add(mix1_ddb);

        mix1_ddtb.setItems(new String[] {"2 Gleise verbinden:connect2"});
        mix1_ddtb.setEnabled(false);
        mix1_ddtb.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ButtonActionPerformed(evt);
            }
        });

        jPanel5.add(mix1_ddtb);

        add(jPanel5);

    }// </editor-fold>//GEN-END:initComponents

    private void CBActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_CBActionPerformed
    {//GEN-HEADEREND:event_CBActionPerformed
		if (CBeventDisable) {
			return;
		}

		int i = ((JComboBox) evt.getSource()).getSelectedIndex();
		ArrayList<String> al = ttypes.get(evt.getActionCommand());
		if (al != null) {
			String s;
			try {
				s = al.get(i);
				dataCollector.collector.thegame.runAction(new EditorActionEvent<>(evt.getActionCommand(), s));
			} catch (ArrayIndexOutOfBoundsException e) {
				dataCollector.collector.gotException(e);
			}
		}
    }//GEN-LAST:event_CBActionPerformed

    private void ButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ButtonActionPerformed
    {//GEN-HEADEREND:event_ButtonActionPerformed
		if (evt.getSource() instanceof JToggleButton) {
			dataCollector.collector.thegame.runAction(new EditorActionEvent<>(evt.getActionCommand(), ((JToggleButton) evt.getSource()).isSelected()));
		} else {
			dataCollector.collector.thegame.runAction(new EditorActionEvent<Boolean>(evt.getActionCommand()));
		}
    }//GEN-LAST:event_ButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox aboveCombo;
    private javax.swing.JComboBox embankmentCombo;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private org.railsim.gui.DropDownButton mix1_ddb;
    private org.railsim.gui.DropDownToggleButton mix1_ddtb;
    private javax.swing.JComboBox railCombo;
    private javax.swing.JComboBox sleeperCombo;
    private javax.swing.JButton switchjunction_Button;
    // End of variables declaration//GEN-END:variables

	void configureCombo(String type, String[] items) {
		JComboBox cb = ctypes.get(type);
		cb.removeAllItems();
		ArrayList<String> al = new ArrayList<>();
		int i = 0;
		while (i < items.length) {
			String s = items[i];
			if ((i & 1) == 0) {
				cb.addItem(s);
			} else {
				al.add(s);
			}
			++i;
		}
		ttypes.put(type, al);
	}

	void initPainterLists() {
		ctypes.put("embankment", embankmentCombo);
		ctypes.put("rail", railCombo);
		ctypes.put("sleeper", sleeperCombo);
		ctypes.put("above", aboveCombo);
		configureCombo("embankment", new String[]{
					"standard", "additionalColorBase,additionalPainterBase",
					"GrÃ¼n", "embankmentColor_1,embankmentPainter_1"
				});
		configureCombo("sleeper", new String[]{
					"standard", "sleeperColorBase,sleeperPainterBase",
					"test", "sleeperColorBase,sleeperPainterBase"
				});
		configureCombo("rail", new String[]{
					"standard", "railColorBase,railPainterBase",
					"test", "railColorBase,railPainterBase"
				});
		configureCombo("above", new String[]{
					"leer", "aboveColorBase,abovePainterBase",
					"Oberleitung", "powerColor,powerPainter",
					"Dach", "roofColor,roofPainter",
					"Tunnel", "tunnelColor,tunnelPainter"
				});
	}

	void trackEvent(EditorEvent e) {
		switch (e.getType()) {
			case EditorEvent.TRACK_SELECTED:
				workingTrack = e.getTrack();
				if (workingTrack.isJunction()) {
					switchjunction_Button.setEnabled(true);
					mix1_ddb.setEnabled(false);
					mix1_ddtb.setEnabled(false);
				} else {
					switchjunction_Button.setEnabled(false);
					mix1_ddb.setEnabled(true);
					mix1_ddtb.setEnabled(true);
				}
				setTrackValues(workingTrack);
				break;
			case EditorEvent.TRACK_MOVING:
			case EditorEvent.TRACK_ROTATING:
			case EditorEvent.TRACK_BOWING:
				workingTrack = e.getTrack();
				switchjunction_Button.setEnabled(false);
				setTrackValues(workingTrack);
				break;
			case EditorEvent.TRACK_MOVED:
			case EditorEvent.TRACK_VALUE_CHANGED:
				workingTrack = e.getTrack();
				setTrackValues(workingTrack);
				break;
			case EditorEvent.TRACK_UNSELECTED:
				workingTrack = e.getTrack();
				switchjunction_Button.setEnabled(false);
				mix1_ddb.setEnabled(false);
				mix1_ddtb.setEnabled(false);
				setTrackValues(null);
				break;
			case EditorEvent.TRACK_SIMPLEPAINTER:
				setPainterValues(e.getSimpleTrack());
				break;
			case EditorEvent.TRACK_2TRACKACTIONFINISHED:
				mix1_ddtb.setSelected(false);
				break;
			default:
				break;
		}
	}

	void setTrackValues(track t) {
	}

	void setPainterValues(simpleTrack t) {
		if (t == null) {
			return;
		}

		CBeventDisable = true;
		String[] p = t.getPainterData();
		HashSet<String> hs = new HashSet<>();

		int i;
		for (i = 0; i < p.length; ++i) {
			String s1 = p[i];
			if (s1 == null) {
				continue;
			}
			hs.add(s1);
		}

		setCombo("embankment", hs);
		setCombo("sleeper", hs);
		setCombo("rail", hs);
		setCombo("above", hs);
		CBeventDisable = false;
	}

	boolean setCombo(String type, HashSet<String> hs) {
		JComboBox cb = ctypes.get(type);
		ArrayList<String> al = ttypes.get(type);

		int i = 0;
		for (String s : al) {
			String[] p = s.split(",");
			boolean foundit = true;
			for (int j = 0; j < p.length; ++j) {
				foundit &= hs.contains(p[j]);
			}
			if (foundit) {
				cb.setSelectedIndex(i);
				return true;
			}
			++i;
		}
		return false;
	}
}
