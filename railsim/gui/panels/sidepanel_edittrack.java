/*
 * $Revision: 20 $
 * Copyright 2008 js-home.org
 * $Name: not supported by cvs2svn $
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.railsim.gui.panels;

import java.util.HashMap;

import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.*;

import org.railsim.*;
import org.railsim.editor.EditorEvent;
import org.railsim.event.*;
import org.railsim.service.track;

/**
 *
 * @author js
 */
public class sidepanel_edittrack extends javax.swing.JPanel {

	boolean myCall = false;

	class edTableModel extends DefaultTableModel {

		Class[] types = new Class[]{
			java.lang.String.class, java.lang.String.class
		};
		HashMap<Integer, Boolean> edMode = new HashMap<>();

		public edTableModel() {
			super(new Object[][]{
						{null, null}
					},
					new String[]{
						"Type", "Wert"
					});
		}

		public void setEditMode(int row, boolean m) {
			edMode.put(row, m);
		}

		@Override
		public Class getColumnClass(int columnIndex) {
			return types[columnIndex];
		}

		@Override
		public boolean isCellEditable(int rowIndex, int columnIndex) {
			if (columnIndex == 0) {
				return false;
			}
			Boolean b = edMode.get(rowIndex);
			return b == null ? false : b.booleanValue();
		}

		@Override
		public void setValueAt(Object value, int row, int col) {/*
			 System.out.println("Setting value at " + row + "," + col
			 + " to " + value
			 + " (an instance of "
			 + value.getClass() + ")"); */

			super.setValueAt(value, row, col);
		}
	};
	edTableModel dataTabModel = new edTableModel();

	/**
	 * Creates new form infoLayer
	 */
	public sidepanel_edittrack() {
		initComponents();
		setTrackValues(null);

		dataTabModel.addTableModelListener(new TableModelListener() {
			@Override
			public void tableChanged(TableModelEvent e) {
				if (myCall) {
					return;
				}
				int row = e.getFirstRow();
				int column = e.getColumn();
				System.out.println("TME: " + column + "/" + row + "::" + e.getType() + " => " + dataTabModel.getValueAt(row, column));
			}
		});

		dataCollector.collector.editorEventListeners.addListener(new AbstractListener() {
			@Override
			public void action(AbstractEvent e) {
				trackEvent((EditorEvent) e);
			}
		});
	}

	/**
	 * This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        jPanel1 = new javax.swing.JPanel();
        dataTable = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());

        setMinimumSize(new java.awt.Dimension(250, 38));
        setPreferredSize(new java.awt.Dimension(250, 200));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Gleisinformation"));
        dataTable.setModel(dataTabModel);
        dataTable.setShowVerticalLines(false);
        jPanel1.add(dataTable, java.awt.BorderLayout.CENTER);

        add(jPanel1, java.awt.BorderLayout.CENTER);

    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable dataTable;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

	void setTrackValues(track t) {
		//javax.swing.table.DefaultTableModel tm=(javax.swing.table.DefaultTableModel)dataTable.getModel();
		edTableModel tm = (edTableModel) dataTable.getModel();

		myCall = true;
		tm.setRowCount(9);
		tm.setValueAt("X", 0, 0);
		tm.setEditMode(0, true);
		tm.setValueAt("Y", 1, 0);
		tm.setEditMode(1, true);
		tm.setValueAt("Drehung", 2, 0);
		tm.setEditMode(2, true);
		tm.setValueAt("Biegung", 3, 0);
		tm.setEditMode(3, true);
		tm.setValueAt("direkte Länge", 4, 0);
		tm.setValueAt("Weglänge", 5, 0);
		tm.setValueAt("Anschlussdrehung", 6, 0);
		tm.setValueAt("Kurvenradius", 7, 0);
		tm.setValueAt("Höhe", 8, 0);
		tm.setEditMode(8, true);
		if (t == null) {
			tm.setValueAt("-", 0, 1);
			tm.setValueAt("-", 1, 1);
			tm.setValueAt("-", 2, 1);
			tm.setValueAt("-", 3, 1);
			tm.setValueAt("-", 4, 1);
			tm.setValueAt("-", 5, 1);
			tm.setValueAt("-", 6, 1);
			tm.setValueAt("-", 7, 1);
			tm.setValueAt("-", 8, 1);
		} else {
			tm.setValueAt(String.format("%d", t.getXY().getX()), 0, 1);
			tm.setValueAt(String.format("%d", t.getXY().getY()), 1, 1);
			tm.setValueAt(String.format("%.2f°", t.getRotation()), 2, 1);
			tm.setValueAt(String.format("%.2f°", t.getBow()), 3, 1);
			tm.setValueAt(String.format("%.2f", t.getLength()), 4, 1);
			tm.setValueAt(String.format("%.2f", t.getDistance()), 5, 1);
			tm.setValueAt(String.format("%.2f°", t.getNextRotation()), 6, 1);
			tm.setValueAt(String.format("%.2f", t.getRadius()), 7, 1);
			tm.setValueAt(String.format("%d", t.getLevel()), 8, 1);
		}
		myCall = false;
		invalidate();
	}

	void trackEvent(EditorEvent e) {
		track workingTrack = e.getTrack();
		switch (e.getType()) {
			case EditorEvent.TRACK_SELECTED:
				setTrackValues(workingTrack);
				break;
			case EditorEvent.TRACK_MOVING:
			case EditorEvent.TRACK_ROTATING:
			case EditorEvent.TRACK_BOWING:
				setTrackValues(workingTrack);
				break;
			case EditorEvent.TRACK_MOVED:
			case EditorEvent.TRACK_VALUE_CHANGED:
				setTrackValues(workingTrack);
				break;
			case EditorEvent.TRACK_UNSELECTED:
				setTrackValues(null);
				break;
			default:
				break;
		}
	}
}
