/*
 * $Revision: 20 $
 * Copyright 2008 js-home.org
 * $Name: not supported by cvs2svn $
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.railsim.gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.*;

import javax.swing.JButton;
import javax.swing.JToggleButton;

import org.railsim.event.AbstractListener;

/**
 *
 * @author js
 */
public class minutesPicker extends javax.swing.JPanel {

	private JToggleButton[] buts;
	private JButton[] rbuts;
	private boolean inClick = false;
	private TreeSet<Integer> mins = new TreeSet<>();
	private AbstractListener lst = null;
	private ActionListener al = new ActionListener() {
		@Override
		public void actionPerformed(ActionEvent e) {
			if (!inClick && lst != null) {
				lst.action(null);
			}
		}
	};

	/**
	 * Creates new form minutePicker
	 */
	public minutesPicker(AbstractListener l) {
		lst = l;
		initComponents();
		buts = new JToggleButton[60];
		rbuts = new JButton[10];
		int k = 0;
		for (int i = 0; i < 60; ++i) {
			int j = (i % 6) * 10 + i / 6;
			buts[j] = new JToggleButton();
			buts[j].setText(String.format(":%02d", j));
			buts[j].setFont(buts[j].getFont().deriveFont(buts[j].getFont().getSize() - 1f));
			buts[j].setMargin(new java.awt.Insets(0, 0, 0, 0));
			buts[j].setFocusPainted(false);
			buts[j].addActionListener(al);
			//buts[j].setBorderPainted(false);
			if (j < 10) {
				JButton b = new JButton();
				b.setText("R");
				b.setToolTipText("Reihe " + j + " einschalten");
				b.setActionCommand("" + j);
				b.setFont(b.getFont().deriveFont(b.getFont().getSize() - 3f));
				b.setMargin(new java.awt.Insets(0, 0, 0, 0));
				b.setFocusPainted(false);
				b.addActionListener(new ActionListener() {
					@Override
					public void actionPerformed(ActionEvent e) {
						inClick = true;
						int j = Integer.parseInt(e.getActionCommand());
						boolean alltrue = true;
						for (int i = 0; i < 60; ++i) {
							if (i % 10 == j) {
								alltrue &= buts[i].isSelected();
							}
						}
						for (int i = 0; i < 60; ++i) {
							if (i % 10 == j) {
								buts[i].setSelected(!alltrue);
							}
						}
						inClick = false;
						al.actionPerformed(null);
					}
				});
				rbuts[k] = b;
				k++;
				fieldPanel.add(b);
			}
			fieldPanel.add(buts[j]);
		}
		setEnabled(false);
	}

	/**
	 * This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        fieldPanel = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        fieldPanel.setLayout(new java.awt.GridLayout(0, 7, 2, 2));

        add(fieldPanel, java.awt.BorderLayout.CENTER);

    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel fieldPanel;
    // End of variables declaration//GEN-END:variables

	@Override
	public void setEnabled(boolean e) {
		super.setEnabled(e);
		for (int i = 0; i < 60; ++i) {
			buts[i].setEnabled(e);
		}
		for (int i = 0; i < 10; ++i) {
			rbuts[i].setEnabled(e);
		}
	}

	public void clear() {
		for (int i = 0; i < 60; ++i) {
			buts[i].setSelected(false);
		}
	}

	public void restore() {
		for (int i = 0; i < 60; ++i) {
			buts[i].setSelected(mins.contains(i));
		}
	}

	public void setValue(TreeSet<Integer> v) {
		mins = v;
		restore();
	}

	public TreeSet<Integer> getValue() {
		TreeSet cmins = new TreeSet<>();
		for (int i = 0; i < 60; ++i) {
			if (buts[i].isSelected()) {
				cmins.add(i);
			}
		}
		return cmins;
	}
}
