/*
 * $Revision: 20 $
 * Copyright 2008 js-home.org
 * $Name: not supported by cvs2svn $
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.railsim.gui;

import java.awt.Dimension;
import java.awt.event.ComponentEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.*;
import java.util.*;

/**
 *
 * @author js
 */
public class MainBar extends javax.swing.JPanel {

	public final static int HIDEPTYPE_NORMAL = 0;
	public final static int HIDEPTYPE_OVERLAY = 1;
	public final static String PANELVISIBILITY = "PanelVisiblityChange";

	class item {

		public String atitle;
		public javax.swing.JPanel mainp = null;
		public javax.swing.JPanel hidep = null;
		public javax.swing.JPanel sidep = null;
		public javax.swing.JToggleButton button = null;
		public int hideptype = HIDEPTYPE_NORMAL;
	}
	ArrayList<item> items = new ArrayList<>();
	JLayeredPane layeredp = null;
	JHideablePane layerHP = null;
	JPanel overlayHP = null;
	JPanel overlayPane = null;
	JPanel sidePane = null;
	item currentItem = null;

	/**
	 * Creates new form MainBar
	 */
	public MainBar(JLayeredPane lp, JPanel sp) {
		layeredp = lp;
		sidePane = sp;
		initComponents();

		hidePanel = new JHideablePane();
		hidePanel.add(hideablePanel);
		hidePanel.setCollapsed(true);
		objectPanel.add(hidePanel, java.awt.BorderLayout.SOUTH);

		layerHP = new JHideablePane();
		layerHP.setCollapsed(true);
		layerHP.setHorizontal(true);
		layerHP.add(sidePanel);
		sidePane.add(layerHP, java.awt.BorderLayout.WEST);

		overlayHP = new JPanel();
		overlayHP.setLayout(new java.awt.BorderLayout());

		layerHP.addPropertyChangeListener(new PropertyChangeListener() {
			@Override
			public void propertyChange(PropertyChangeEvent evt) {
			}
		});
		hidePanel.addPropertyChangeListener(new PropertyChangeListener() {
			@Override
			public void propertyChange(PropertyChangeEvent evt) {
				if (evt.getPropertyName().compareTo(JHideablePane.ANIMATION_STATE_KEY) == 0) {
					if (evt.getNewValue().toString().compareTo("expanded") == 0) {
						setOverlay(true);
					}
				}
			}
		});
		addComponentListener(new java.awt.event.ComponentAdapter() {
			@Override
			public void componentResized(ComponentEvent e) {
				resize();
			}
		});
	}

	/**
	 * This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        cardGroup = new javax.swing.ButtonGroup();
        hideablePanel = new javax.swing.JPanel();
        sidePanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        fixedButtonPanel = new javax.swing.JPanel();
        buttonPanel = new javax.swing.JPanel();
        hideButton2 = new javax.swing.JButton();
        hideButton1 = new javax.swing.JButton();
        objectPanel = new javax.swing.JPanel();
        mainPanel = new javax.swing.JPanel();

        hideablePanel.setLayout(new java.awt.CardLayout());

        sidePanel.setLayout(new java.awt.CardLayout());

        setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel1.setMaximumSize(new java.awt.Dimension(2147483647, 23));
        jPanel1.setMinimumSize(new java.awt.Dimension(100, 23));
        jPanel1.setPreferredSize(new java.awt.Dimension(100, 23));
        fixedButtonPanel.setLayout(new java.awt.BorderLayout());

        fixedButtonPanel.setMaximumSize(new java.awt.Dimension(2147483647, 25));
        fixedButtonPanel.setMinimumSize(new java.awt.Dimension(100, 23));
        buttonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 1, 0));

        buttonPanel.setMaximumSize(new java.awt.Dimension(32767, 25));
        buttonPanel.setMinimumSize(new java.awt.Dimension(40, 23));
        buttonPanel.setPreferredSize(new java.awt.Dimension(50, 23));
        fixedButtonPanel.add(buttonPanel, java.awt.BorderLayout.CENTER);

        jPanel1.add(fixedButtonPanel, java.awt.BorderLayout.CENTER);

        hideButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/railsim/gui/resources/mainbar_arrow_down.gif")));
        hideButton2.setFocusable(false);
        hideButton2.setMaximumSize(new java.awt.Dimension(23, 23));
        hideButton2.setMinimumSize(new java.awt.Dimension(23, 23));
        hideButton2.setPreferredSize(new java.awt.Dimension(23, 23));
        hideButton2.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                hideButton2ActionPerformed(evt);
                hideButtonActionPerformed(evt);
            }
        });

        jPanel1.add(hideButton2, java.awt.BorderLayout.EAST);

        hideButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/railsim/gui/resources/mainbar_arrow_down.gif")));
        hideButton1.setFocusable(false);
        hideButton1.setMaximumSize(new java.awt.Dimension(23, 23));
        hideButton1.setMinimumSize(new java.awt.Dimension(23, 23));
        hideButton1.setPreferredSize(new java.awt.Dimension(23, 23));
        hideButton1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                hideButtonActionPerformed(evt);
            }
        });

        jPanel1.add(hideButton1, java.awt.BorderLayout.WEST);

        add(jPanel1, java.awt.BorderLayout.NORTH);

        objectPanel.setLayout(new java.awt.BorderLayout());

        objectPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        mainPanel.setLayout(new java.awt.CardLayout());

        objectPanel.add(mainPanel, java.awt.BorderLayout.CENTER);

        add(objectPanel, java.awt.BorderLayout.CENTER);

    }// </editor-fold>//GEN-END:initComponents

    private void hideButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_hideButtonActionPerformed
    {//GEN-HEADEREND:event_hideButtonActionPerformed
		if (hidePanel.isCollapsed()) {
			hideButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/railsim/gui/resources/mainbar_arrow_up.gif")));
			hideButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/railsim/gui/resources/mainbar_arrow_up.gif")));
		} else {
			hideButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/railsim/gui/resources/mainbar_arrow_down.gif")));
			hideButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/railsim/gui/resources/mainbar_arrow_down.gif")));
		}
		setLayer(hidePanel.isCollapsed());
		setOverlay(false);
		hidePanel.setCollapsed(!hidePanel.isCollapsed());
    }//GEN-LAST:event_hideButtonActionPerformed

    private void hideButton2ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_hideButton2ActionPerformed
    {//GEN-HEADEREND:event_hideButton2ActionPerformed
    }//GEN-LAST:event_hideButton2ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.ButtonGroup cardGroup;
    private javax.swing.JPanel fixedButtonPanel;
    private javax.swing.JButton hideButton1;
    private javax.swing.JButton hideButton2;
    private javax.swing.JPanel hideablePanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPanel objectPanel;
    private javax.swing.JPanel sidePanel;
    // End of variables declaration//GEN-END:variables
	private JHideablePane hidePanel;

	public void add(String title, String atitle, javax.swing.JPanel mainp, javax.swing.JPanel hidep, java.awt.event.ActionListener a) {
		add(title, atitle, mainp, hidep, HIDEPTYPE_NORMAL, null, a);
	}

	public void add(String title, String atitle, javax.swing.JPanel mainp, javax.swing.JPanel hidep) {
		add(title, atitle, mainp, hidep, HIDEPTYPE_NORMAL, null);
	}

	public void add(String title, String atitle, javax.swing.JPanel mainp, javax.swing.JPanel hidep, javax.swing.JPanel sidep, java.awt.event.ActionListener a) {
		add(title, atitle, mainp, hidep, HIDEPTYPE_NORMAL, sidep, a);
	}

	public void add(String title, String atitle, javax.swing.JPanel mainp, javax.swing.JPanel hidep, int hideptype) {
		add(title, atitle, mainp, hidep, hideptype, null);
	}

	public void add(String title, String atitle, javax.swing.JPanel mainp, javax.swing.JPanel hidep, int hideptype, java.awt.event.ActionListener a) {
		add(title, atitle, mainp, hidep, hideptype, null, a);
	}

	public void add(String title, String atitle, javax.swing.JPanel mainp, javax.swing.JPanel hidep, int hideptype, javax.swing.JPanel sidep, java.awt.event.ActionListener a) {
		item i = new item();
		if (hidep == null) {
			hidep = new javax.swing.JPanel();
		}
		i.atitle = atitle;
		i.mainp = mainp;
		i.hidep = hidep;
		i.sidep = sidep;
		i.hideptype = hideptype;
		if (hideptype == HIDEPTYPE_OVERLAY) {
			hidep = new javax.swing.JPanel();
		}
		i.button = new JToggleButton(title);
		cardGroup.add(i.button);
		i.button.setActionCommand(atitle);
		if (a != null) {
			i.button.addActionListener(a);
		}
		i.button.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				cardButtonActionPerformed(evt);
			}
		});
		i.button.setFont(new java.awt.Font("Tahoma", 1, 11));
		Dimension d = i.button.getPreferredSize();
		d.height = 23;
		i.button.setMaximumSize(d);
		i.button.setMinimumSize(d);
		i.button.setPreferredSize(d);
		//i.button.setBorder(new MainBarItemBorder(BevelBorder.RAISED));

		items.add(i);
		buttonPanel.add(i.button);
		mainPanel.add(mainp, atitle);
		hideablePanel.add(hidep, atitle);
		if (sidep != null) {
			sidePanel.add(sidep, atitle);
		}
		if (items.size() == 1) {
			i.button.doClick();
		}
		//Dimension dim=this.getMinimumSize(); System.out.println("D:"+dim);
	}

	public void addFixed(javax.swing.JPanel fixedp) {
		fixedButtonPanel.add(fixedp, java.awt.BorderLayout.EAST);
		//fixedButtonPanel.invalidate();
		invalidate();
	}

	public String getSelected() {
		return cardGroup.getSelection().getActionCommand();
	}

	private void cardButtonActionPerformed(java.awt.event.ActionEvent evt) {
		String a = evt.getActionCommand();
		for (item i : items) {
			if (i.atitle.compareTo(a) == 0) {
				if (currentItem != null) {
					currentItem.mainp.firePropertyChange(PANELVISIBILITY, true, false);
					currentItem.hidep.firePropertyChange(PANELVISIBILITY, true, false);
					if (currentItem.sidep != null) {
						currentItem.sidep.firePropertyChange(PANELVISIBILITY, true, false);
					}
				}
				currentItem = i;
				((java.awt.CardLayout) mainPanel.getLayout()).show(mainPanel, a);
				((java.awt.CardLayout) hideablePanel.getLayout()).show(hideablePanel, a);
				((java.awt.CardLayout) sidePanel.getLayout()).show(sidePanel, a);
				setLayer(!hidePanel.isCollapsed());
				setOverlay(!hidePanel.isCollapsed());
				revalidate();
				javax.swing.SwingUtilities.invokeLater(new Runnable() {
					@Override
					public void run() {
						currentItem.mainp.firePropertyChange(PANELVISIBILITY, false, true);
						currentItem.hidep.firePropertyChange(PANELVISIBILITY, false, true);
						if (currentItem.sidep != null) {
							currentItem.sidep.firePropertyChange(PANELVISIBILITY, false, true);
						}
					}
				});
				break;
			}
		}
	}

	private void resize() {
		overlayHP.setSize(mainPanel.getWidth(), hidePanel.getHeight() + mainPanel.getHeight());
		// getWidth(),getHeight()
	}

	private void setLayer(boolean open) {
		boolean doOpen = open;
		if (currentItem == null) {
			doOpen = false;
		} else if (currentItem.sidep == null) {
			doOpen = false;
		} else {
			currentItem.sidep.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

		}
		if (layerHP.isCollapsed() == doOpen) {
			if (doOpen) {
				javax.swing.SwingUtilities.invokeLater(new Runnable() {
					@Override
					public void run() {
						layerHP.setCollapsed(false);
					}
				});
			} else {
				javax.swing.SwingUtilities.invokeLater(new Runnable() {
					@Override
					public void run() {
						layerHP.setCollapsed(true);
					}
				});
			}
		}
	}

	private void setOverlay(boolean open) {
		if (open) {
			layeredp.remove(overlayHP);
			if (currentItem.hideptype == HIDEPTYPE_OVERLAY) {
				overlayHP.removeAll();
				layeredp.add(overlayHP, JLayeredPane.PALETTE_LAYER);
				overlayHP.setLocation(javax.swing.SwingUtilities.convertPoint(mainPanel, 0, 0, layeredp));
				overlayHP.add(currentItem.hidep, java.awt.BorderLayout.WEST);
				currentItem.hidep.invalidate();
				overlayHP.setVisible(true);
				overlayHP.setSize(mainPanel.getWidth(), hidePanel.getHeight() + mainPanel.getHeight());
				overlayHP.invalidate();
				overlayHP.doLayout();
			}
		} else {
			layeredp.remove(overlayHP);
		}
	}
}
