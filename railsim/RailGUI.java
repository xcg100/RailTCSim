/*
 * $Revision: 22 $
 * Copyright 2008 js-home.org
 * $Name: not supported by cvs2svn $
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.railsim;

import com.l2fprod.common.swing.JTipOfTheDay;
import com.l2fprod.common.swing.TipModel;
import com.l2fprod.common.swing.tips.TipLoader;

import java.awt.*;
import java.io.IOException;
import java.util.GregorianCalendar;
import java.util.Properties;
import java.util.Timer;
import java.util.TimerTask;
import java.util.prefs.BackingStoreException;

import javax.swing.JOptionPane;

import org.railsim.editor.*;
import org.railsim.event.*;
import org.railsim.gui.*;
import org.railsim.gui.panels.*;
import org.railsim.service.*;
import org.railsim.train.collection;

/**
 *
 * @author js
 */
public class RailGUI extends javax.swing.JFrame {

	gamearea thegame = null;
	painter thepainter = null;
	collection alltraindata = null;
	boolean scrollerUsed = false;
	static boolean fullscreen = false;
	static final boolean doFullscreen = false;	// true: not working!!!!

	public static boolean isFullscreen() {
		return fullscreen;
	}

	/**
	 * Creates new form main
	 *
	 * @param _originalDM
	 */
	public RailGUI(DisplayMode _originalDM) {
		// run with: -Xms100m -Xmx500m
		statics.setLookAndFeel("System", this);

//		GregorianCalendar max = new GregorianCalendar(2015, 12, 31);
//		if (max.before(new GregorianCalendar())) {
//			JOptionPane.showMessageDialog(this, "Der Testzeitraum dieser Version von SimplyTrain ist abgelaufen!\nDas Programm wird nun beendet.\nBitte nach einer neuen Version auf http://www.js-home.org/SimplyTrain sehen.", "SimplyTrain: Testzeitraum abgelaufen!", JOptionPane.ERROR_MESSAGE);
//			System.exit(0);
//		} else {
//			// JOptionPane.showMessageDialog(this,"Achtung! Dies ist eine Pre-Alpha Version.\nViele Funktionen k√∂nnen noch fehlerhaft sein oder\ngar nicht funktionieren.\nAktuelle Informationen und neue Versionen auf http://www.js-home.org/SimplyTrain","SimplyTrain: Testzeitraum abgelaufen!",JOptionPane.INFORMATION_MESSAGE);
//		}

		// http://java.sun.com/j2se/1.5.0/docs/guide/2d/flags.html
		System.setProperty("sun.java2d.translaccel", "true");

		originalDM = _originalDM;
		initScreen();

		initComponents();
		if (fullscreen) {
			device.setFullScreenWindow(this);
			validate();
		}

		initAdditionalComponents();
		if (!fullscreen) {
			setSize(880, 500);
			setLocationRelativeTo(null);
		} else {
			setSize(new Dimension(originalDM.getWidth(), originalDM.getHeight()));
			validate();
		}

		dataCollector.collector.exceptionListeners.addListener(new AbstractListener() {
			@Override
			public void action(AbstractEvent e) {
				Exception ex = (Exception) e.getSource();
				System.out.println(ex.getMessage());
			}
		});
		setVisible(true);

		finishInit();
	}

	/**
	 * This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        mainPanel = new javax.swing.JPanel();
        horiz_ScrollBar = new javax.swing.JScrollBar();
        vert_ScrollBar = new javax.swing.JScrollBar();
        toolPanel = new javax.swing.JPanel();
        sidePanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconImage(statics.loadGUIImage("mainwindow.png"));
        setMinimumSize(new java.awt.Dimension(400, 139));
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                formWindowClosing(evt);
            }
        });

        mainPanel.setLayout(new java.awt.BorderLayout());

        horiz_ScrollBar.setOrientation(javax.swing.JScrollBar.HORIZONTAL);
        horiz_ScrollBar.addAdjustmentListener(new java.awt.event.AdjustmentListener()
        {
            public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt)
            {
                horiz_ScrollBarAdjustmentValueChanged(evt);
            }
        });

        mainPanel.add(horiz_ScrollBar, java.awt.BorderLayout.SOUTH);

        vert_ScrollBar.addAdjustmentListener(new java.awt.event.AdjustmentListener()
        {
            public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt)
            {
                vert_ScrollBarAdjustmentValueChanged(evt);
            }
        });

        mainPanel.add(vert_ScrollBar, java.awt.BorderLayout.EAST);

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        toolPanel.setLayout(new java.awt.BorderLayout());

        getContentPane().add(toolPanel, java.awt.BorderLayout.NORTH);

        sidePanel.setLayout(new java.awt.BorderLayout());

        sidePanel.setMinimumSize(new java.awt.Dimension(0, 0));
        getContentPane().add(sidePanel, java.awt.BorderLayout.EAST);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void vert_ScrollBarAdjustmentValueChanged(java.awt.event.AdjustmentEvent evt)//GEN-FIRST:event_vert_ScrollBarAdjustmentValueChanged
    {//GEN-HEADEREND:event_vert_ScrollBarAdjustmentValueChanged
		scrollerUsed = true;
		thepainter.setY(vert_ScrollBar.getValue());
		scrollerUsed = false;
    }//GEN-LAST:event_vert_ScrollBarAdjustmentValueChanged

    private void horiz_ScrollBarAdjustmentValueChanged(java.awt.event.AdjustmentEvent evt)//GEN-FIRST:event_horiz_ScrollBarAdjustmentValueChanged
    {//GEN-HEADEREND:event_horiz_ScrollBarAdjustmentValueChanged
		scrollerUsed = true;
		thepainter.setX(horiz_ScrollBar.getValue());
		scrollerUsed = false;
    }//GEN-LAST:event_horiz_ScrollBarAdjustmentValueChanged

    private void formWindowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosing
    {//GEN-HEADEREND:event_formWindowClosing
		dataCollector.collector.quitProgram();
    }//GEN-LAST:event_formWindowClosing
	MainBar mb;

	private void initAdditionalComponents() {
		dataCollector.collector.setMain(this);
		mb = new MainBar(getLayeredPane(), sidePanel);

		java.awt.event.ActionListener a = new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				dataCollector.collector.setEditMode(mb.getSelected());
				dataCollector.collector.editorEvent(EditorEvent.TRACKOBJECT_UNSELECTED);
			}
		};
		thegame = new gamearea();
		mainPanel.add(thegame, java.awt.BorderLayout.CENTER);
		getContentPane().add(new StatusBar(), java.awt.BorderLayout.SOUTH);
		pack();

		alltraindata = new collection();
		thepainter = new painter(thegame);
		thegame.thepainter = thepainter;
		dataCollector.collector.setGame(thegame);
		dataCollector.collector.setPainter(thepainter);
		dataCollector.collector.setAllTrainData(alltraindata);

		mb.add("File", "File", new mainpanel_file(), new hidepanel_file(), a);

		mb.add("Track", "Edit Track", new mainpanel_edittrack(), new hidepanel_edittrack(), new sidepanel_edittrack(), a);
		thegame.addEditor("Edit Track", new trackeditor());
		mb.add("Trackgroup", "Edit Trackgroup", new mainpanel_edittrackgroup(), new hidepanel_edittrackgroup(), a);
		thegame.addEditor("Edit Trackgroup", new trackgroupeditor());
		mb.add("Trackobjects", "Edit Trackobjects", new mainpanel_edittrackobjects(), new hidepanel_edittrackobjects(), MainBar.HIDEPTYPE_OVERLAY, new sidepanel_edittrackobjects(), a);
		thegame.addEditor("Edit Trackobjects", new trackobjectseditor());
		mb.add("Signal & Routes", "Edit Signal & Routes", new mainpanel_editsignal(), new hidepanel_editsignal(), MainBar.HIDEPTYPE_OVERLAY, new sidepanel_editsignal(), a);
		thegame.addEditor("Edit Signal & Routes", new patheditor());

		mb.add("Train", "Edit Train", new mainpanel_edittrain(), null, new sidepanel_edittrain(), a);
		thegame.addEditor("Edit Train", new traineditor());

		//mb.add("Test","Test",new mainpanel_test(),new hidepanel_options(),a);
		//thegame.addEditor("Test",new testeditor());

		mb.add("About", "About", new mainpanel_about(), new hidepanel_about(), a);

		mb.addFixed(new fixedpanel());

		toolPanel.add(mb);
		pack();
		/*
		 infoLayer2 ly2=new infoLayer2();
		 ly2.setSize(200,100);
		 ly2.setLocation(450,30);
		 JLayeredPane lp=this.getLayeredPane();
		 lp.add(ly2,JLayeredPane.PALETTE_LAYER);
		 ly2.setVisible(true); */

		dataCollector.collector.filenameListeners.addListener(new AbstractListener() {
			@Override
			public void action(AbstractEvent e) {
				String f = (String) e.getSource();
				if (f != null && f.length() > 0) {
					setTitle("SimplyTrain: " + e.getSource());
				} else {
					setTitle("SimplyTrain");
				}
			}
		});
		dataCollector.collector.setFilename("");

		dataCollector.collector.sizeOrPosChangedListeners.addListener(new AbstractListener() {
			@Override
			public void action(AbstractEvent e) {
				if (!scrollerUsed) {
					horiz_ScrollBar.setValues(thepainter.getHSliderPos(), thepainter.getImgWidth(), thepainter.getHSliderMin(), thepainter.getHSliderMax());
					horiz_ScrollBar.setUnitIncrement(thepainter.getTrackWidth() / 10);
					vert_ScrollBar.setValues(thepainter.getVSliderPos(), thepainter.getImgHeight(), thepainter.getVSliderMin(), thepainter.getVSliderMax());
					vert_ScrollBar.setUnitIncrement(thepainter.getTrackHeight() / 10);
				}
			}
		});
	}

	@Override
	public void pack() {
		//if (!fullscreen)
		super.pack();
	}
	static private GraphicsDevice device = null;
	static private DisplayMode originalDM = null;

	static public void recoverDisplay() {
		if (originalDM != null && fullscreen) {
			if (device.isDisplayChangeSupported()) {
				device.setDisplayMode(originalDM);
				device.setFullScreenWindow(null);
			}
		}
	}

	public GraphicsDevice getDevice() {
		return device;
	}

	private void initScreen() {
		GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment();
		GraphicsDevice[] devices = env.getScreenDevices();
		if (devices != null && devices.length > 0) {
			device = env.getDefaultScreenDevice();
			//device=devices[0];    // not with dual head!!

			Thread shutdownthread = new Thread() {
				@Override
				public void run() {
					RailGUI.recoverDisplay();
				}
			};
			if (originalDM == null) {
				originalDM = device.getDisplayMode();
			}
			Runtime.getRuntime().addShutdownHook(shutdownthread);

			if (doFullscreen) {
				boolean isFullScreen = device.isFullScreenSupported();
				fullscreen = isFullScreen && originalDM != null;
				setResizable(!fullscreen);
				//setUndecorated(fullscreen);
			}
		}
	}

	private void finishInit() {
		// TODO: setIconImage(Image);

		Timer tm = new Timer();
		tm.schedule(new TimerTask() {
			@Override
			public void run() {
				dataCollector.collector.startSim();
				dataCollector.collector.sizeOrPosChanged();
			}
		}, 1000);

		java.awt.EventQueue.invokeLater(new Runnable() {
			@Override
			public void run() {
				alltraindata.load();
			}
		});

		thepainter.testIt();

		tipOfTheDay(false);
	}

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {
			@Override
			public void run() {
				new RailGUI(null);
			}
		});
	}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollBar horiz_ScrollBar;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPanel sidePanel;
    private javax.swing.JPanel toolPanel;
    private javax.swing.JScrollBar vert_ScrollBar;
    // End of variables declaration//GEN-END:variables

	public void tipOfTheDay(boolean force) {
		Properties props = new Properties();
		try {
			props.load(RailGUI.class.getResourceAsStream("/org/railsim/gui/resources/totd.properties"));
		} catch (IOException ex) {
			return;
		} catch (NullPointerException e) {
			dataCollector.collector.gotException(e);
		}

		TipModel tips = TipLoader.load(props);

		/*	DefaultTipModel tips = new DefaultTipModel();
		 // plain text
		 tips
		 .add(new DefaultTip(
		 "tip1",
		 "SimplyTrain Tip 1"));

		 // html text
		 tips.add(new DefaultTip("tip2",
		 "<html>This is an html <b>TIP</b><br><center>"
		 + "<table border=\"1\">" + "<tr><td>1</td><td>entry 1</td></tr>"
		 + "<tr><td>2</td><td>entry 2</td></tr>"
		 + "<tr><td>3</td><td>entry 3</td></tr>" + "</table>"));

		 // a Component
		 tips.add(new DefaultTip("tip3", new JTree()));

		 // an Icon
		 tips.add(new DefaultTip("tip 4", new ImageIcon(BasicTipOfTheDayUI.class
		 .getResource("TipOfTheDay24.gif"))));
		 */
		final JTipOfTheDay totd = new JTipOfTheDay(tips);
		int t = dataCollector.collector.prefs_totd.getInt("lasttip", 0);
		if ((t + 1) < totd.getModel().getTipCount()) {
			totd.setCurrentTip(t + 1);
		} else {
			totd.setCurrentTip(0);
		}

		if (force) {
			final JTipOfTheDay.ShowOnStartupChoice fake = new JTipOfTheDay.ShowOnStartupChoice() {
				@Override
				public boolean isShowingOnStartup() {
					return totd.isShowingOnStartup(dataCollector.collector.prefs_totd);
				}

				@Override
				public void setShowingOnStartup(boolean showOnStartup) {
					if (showOnStartup) {
						totd.forceShowOnStartup(dataCollector.collector.prefs_totd);
						try {
							dataCollector.collector.prefs_totd.flush();
						} catch (BackingStoreException e) {
							dataCollector.collector.gotException(e);
						}
					}
				}
			};
			totd.showDialog(this, fake, true);
		} else {
			totd.showDialog(this, dataCollector.collector.prefs_totd);
		}
		dataCollector.collector.prefs_totd.putInt("lasttip", totd.getCurrentTip());
		try {
			dataCollector.collector.prefs_totd.flush();
		} catch (BackingStoreException e) {
			dataCollector.collector.gotException(e);
		}
	}
}
